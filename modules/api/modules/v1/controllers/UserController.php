<?php

namespace app\modules\api\modules\v1\controllers;
use app\helpers\Password;
use app\models\Tokens;
use app\models\User;
use app\modules\api\filters\HeaderFilter;
use tiagocomti\cryptbox\Cryptbox;
use yii\db\Exception;
use yii\web\BadRequestHttpException;
use yii\web\ForbiddenHttpException;
use yii\web\Response;
use yii\web\UnauthorizedHttpException;

class UserController extends DefaultController
{
    public function behaviors()
    {
        $behaviors = parent::behaviors();

        $behaviors['headerFilter'] = [
            'class' => HeaderFilter::class,
            'excludedActions' => [
                "security/login",
                "user/login",
                "user/health-check",
            ]
        ];
        return $behaviors; // TODO: Change the autogenerated stub
    }
    /**
     * Creating a new user for my sis. Curl example:
     */
    public function actionCreate(){
        echo "s";exit;
        return ['asd'=>true];
    }

    /**
     * @SWG\Post(path="/api/v1/user/login",
     *     tags={"Security"},
     *     summary="Faça o login do usuário e será retornado informações desse usuário, como token para acessar outras apis. Para ambientes web, recomenda-se utilizar o localstorage para armazenar esse token, salve o token com uma criptografia assimetrica. Para ambientes web, salve numa keychain/keystore. [Recomendado] Utilize a chamada /security/get-public-key para receber uma public key e criptografar a senha antes de ser enviada e ative o campo encrypt",
     *     @SWG\Parameter(
     *         description="usuário, formato e-mail ou username",
     *         in="body",
     *         name="body",
     *         required=true,
     *         @SWG\Schema(
     *          @SWG\Property(property="email", type="string", description="E-mail que o cara cadastrou na plataforma"),
     *          @SWG\Property(property="password", type="string", description="Senha do caboclo"),
     *          @SWG\Property(property="encrypt", type="boolean"),
     *       )
     *     ),
     *     @SWG\Response(
     *         response = 200,
     *         description = "User collection response",
     *         @SWG\Header(header="x-next", @SWG\Schema(type="string"), description="A link to the next page of responses", type="string"),
     *          @SWG\Schema(
     *              @SWG\Property(property="user", type="object",description="asdasd", ref = "#/definitions/User"),
     *              @SWG\Property(property="token", type="integer", description=""),
     *          ),
     *     ),
     *     @SWG\Response(
     *         response = 401,
     *         description = "Fail to login",
     *          @SWG\Schema(
     *              @SWG\Property(property="name", type="string",description="qual foi o erro, muito provavelmente será Unauthorized"),
     *              @SWG\Property(property="message", type="string", description=""),
     *              @SWG\Property(property="code", type="string", description="Esse code é para o desenvolvedor back, nao faz diferença pro front"),
     *              @SWG\Property(property="status", type="integer", description="mesmo status code http"),
     *              @SWG\Property(property="type", type="integer", description="Também pro backend, pra saber qual classe que chamou o retorno de falha"),
     *
     *          ),
     *     ),
     * )
     * @throws Exception
     * @throws BadRequestHttpException
     * @throws UnauthorizedHttpException
     * @throws ForbiddenHttpException
     */
    public function actionLogin(): array
    {
        $user = User::login($this->_post["username"],$this->_post["password"]);
        if(!$user){
            throw new UnauthorizedHttpException("Login ou senha incorretos");
        }
        return ["token" => $user->getMyToken(), "type" => $user->type];
    }

    /**
     * @throws \yii\db\Exception
     * @throws UnauthorizedHttpException
     */
    public function actionHealthCheck(): bool
    {
        $token = ($this->_post["token"]);
        if(!Tokens::getUserByToken($token)){
            throw new UnauthorizedHttpException("Token não encontrado");
        }
        return true;
    }
}